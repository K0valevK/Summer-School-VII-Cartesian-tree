https://old.informatics.msk.ru/mod/statements/view3.php?chapterid=2791#1

#include <algorithm>
#include <cmath>
#include <iostream>
#include <random>
#include <vector>

std::mt19937 gen;

struct Node {
    int x;
    int y;
    int size = 1;
    Node* left = nullptr;
    Node* right = nullptr;

    Node(int x) : x(x) {
        y = gen();
    }
};

int Get_size(Node* n) {
    return n ? n->size : 0;
}

void Upd(Node* n) {
    n->size = 1 + Get_size(n->left) + Get_size(n->right);
}

std::pair<Node*, Node*> Split(Node* root, int k) {
    if (!root) {
        return {0, 0};
    }
    if (Get_size(root->left) < k) {
        std::pair<Node*, Node*> q = Split(root->right, k - Get_size(root->left) - 1);
        root->right = q.first;
        Upd(root);
        return { root, q.second };
    } else {
        std::pair<Node*, Node*> q = Split(root->left, k);
        root->left = q.second;
        Upd(root);
        return { q.first, root };
    }
}

Node* Merge(Node* left, Node* right) {
    if (!left) {
        return right;
    }
    if (!right) {
        return left;
    }
    if (left->y > right->y) {
        left->right = Merge(left->right, right);
        Upd(left);
        return left;
    } else {
        right->left = Merge(left, right->left);
        Upd(right);
        return right;
    }
}

Node* Ctrlx(Node*& root, int l, int r) {
    std::pair<Node*, Node*> q1 = Split(root, r);
    std::pair<Node*, Node*> q2 = Split(q1.first, l - 1);
    root = Merge(q2.first, q1.second);
    return q2.second;
}

void Print(Node* root) {
    if (!root) {
        return;
    }
    Print(root->left);
    std::cout << root->x << " ";
    Print(root->right);
}

int main() {
    Node* root = nullptr;
    int n = 0;
    int m = 0;
    std::cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        root = Merge(root, new Node(i));
    }
    for (int i = 0; i < m; ++i) {
        int l = 0;
        int r = 0;
        std::cin >> l >> r;
        Node* tmp = Ctrlx(root, l, r);
        root = Merge(tmp, root);
    }
    Print(root);

    return 0;
}
