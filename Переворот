https://old.informatics.msk.ru/mod/statements/view3.php?chapterid=111240#1

#include <algorithm>
#include <cmath>
#include <iostream>
#include <random>
#include <vector>

std::mt19937 gen;

struct Node {
	int x;
    int y;
    int size = 1;
    int min_val;
    int rev = 0;
	Node* left = nullptr;
    Node* right = nullptr;

	Node(int x) : x(x), min_val(x) {
        y = gen();
	}
};

int Get_size(Node* n) {
	return n ? n->size : 0;
}

void Upd(Node* n) {
	n->size = 1 + Get_size(n->left) + Get_size(n->right);
}

int Get_min(Node* n) {
    return n ? n->min_val : 1000000000;
}

void Upd_min(Node* n) {
    n->min_val = std::min(n->x, std::min(Get_min(n->left), Get_min(n->right)));
}

void Upd_rev(Node* n) {
    if (n && n->rev) {
        n->rev = 0;
        std::swap(n->left, n->right);
        if (n->left) {
            n->left->rev = 1 - n->left->rev;
        }
        if (n->right) {
            n->right->rev = 1 - n->right->rev;
        }
    }
}

std::pair<Node*, Node*> Split(Node* root, int k) {
	if (!root) {
        return {0, 0};
    }
    Upd_rev(root);
	if (Get_size(root->left) < k) {
        std::pair<Node*, Node*> q = Split(root->right, k - Get_size(root->left) - 1);
		root->right = q.first;
        Upd(root);
        Upd_min(root);
		return { root, q.second };
	} else {
        std::pair<Node*, Node*> q = Split(root->left, k);
		root->left = q.second;
        Upd(root);
        Upd_min(root);
		return { q.first, root };
	}
}

Node* Merge(Node* left, Node* right) {
    Upd_rev(left);
    Upd_rev(right);
	if (!left) {
        return right;
    }
	if (!right) {
        return left;
    }
	if (left->y > right->y) {
		left->right = Merge(left->right, right);
        Upd(left);
        Upd_min(left);
		return left;
	} else {
		right->left = Merge(left, right->left);
        Upd(right);
        Upd_min(right);
		return right;
	}
}

Node* Ctrlx(Node*& root, int l, int r) {
    std::pair<Node*, Node*> q1 = Split(root, r);
    std::pair<Node*, Node*> q2 = Split(q1.first, l - 1);
	root = Merge(q2.first, q1.second);
	return q2.second;
}

void Print_min(Node*& root, int l, int r) {
    std::pair<Node*, Node*> q1 = Split(root, r);
    std::pair<Node*, Node*> q2 = Split(q1.first, l - 1);
    std::cout << q2.second->min_val << std::endl;
    root = Merge(q2.first, Merge(q2.second, q1.second));
}

void Reverse(Node*& root, int l, int r) {
    std::pair<Node*, Node*> q1 = Split(root, r);
    std::pair<Node*, Node*> q2 = Split(q1.first, l - 1);
    q2.second->rev = 1 - q2.second->rev;
    root = Merge(q2.first, Merge(q2.second, q1.second));
}

void Print(Node* root) {
	if (!root) {
        return;
    }
    Print(root->left);
	std::cout << root->x << " ";
    Print(root->right);
}

int main() {
	Node* root = nullptr;
	int n = 0;
    int m = 0;
    std::cin >> n >> m;
	for (size_t i = 0; i < n; ++i) {
        int x = 0;
        std::cin >> x;
		root = Merge(root, new Node(x));
	}
    for (size_t i = 0; i < m; ++i) {
        int command = 0;
        int l = 0;
        int r = 0;
        std::cin >> command >> l >> r;
        if (command == 1) {
            Reverse(root, l, r);
        } else {
            Print_min(root, l, r);
        }
    }

	return 0;
}
